from deepxde.geometry.pointcloud import PointCloud
import deepxde as dde
import numpy as np
import pyvista
import meshio
import torch
from tqdm import trange
from time import time

times=np.linspace(0,1,21,dtype=np.float32)
theta=np.array([0.7289120207996115,0.25409463628131845,0.11009024695349051,0.9557287080549567,0.7111841098771446,0.5639913111779458,0.317057353131431,0.4173116530978206,0.951601632294682,0.8187215764570569,0.6265946679318678,0.9157032519815728,0.11797774345327781,0.5139512809568915,0.8928363594937064,0.6173035001673071,0.4701805002649244,0.9853589932547693,0.3458669798645811,0.1781860793536314,0.44820690775673344,0.2224407887449683,0.5257490624696358,0.9834568326702106,0.20612809566657997,0.21763296080042366,0.681764970719294,0.7903778599048281,0.20091542682148972,0.5863304351949501,0.9377992293962237,0.5422700980792073,0.14607551415736647,0.3386767115889571,0.6107070535689356,0.1817910418370403,0.6840203319811349,0.5828853290127993,0.1169948996694129,0.8000870971191111,0.4346126279215371,0.49256657755736755,0.581869052012907,0.7501792068145007,0.7758667624626573,0.8888947165257599,0.4988312766650844,0.6791047884868425,0.8892165976415137,0.35821250190175413,0.9171422588046395,0.5536799648633998,0.6915333466712602,0.15473974073568258,0.3446104126774485,0.9632901291695781,0.3184032666046604,0.14390268594626723,0.47635129415356003,0.8729330540271749,0.24343061755484577,0.5639601307039651,0.7905645792763382,0.6159551493515403,0.7488487610971467,0.4983361170766347,0.280592855452091,0.5457239559390114,0.12504423371464754,0.44408027484140156,0.3595512110416761,0.3254797474200507,0.3011557475707408,0.9901286151456867,0.3060223952946383,0.5222035030645408,0.9243808004735911,0.5509245973761588,0.7917189266517366,0.622551061659853,0.8648550932650503,0.8000694177193837,0.8816243454370987,0.14981761718185166,0.779490167269205,0.4016123425883861,0.6034140116439618,0.15846220967836758,0.9586851002312624,0.44371555334021406,0.4950826771244593,0.7361237473129891,0.9493696989038557,0.7819922641912838,0.9302579684995561,0.6626264510457329,0.7618815099532775,0.3957944159321374,0.5159701975474963,0.22450716754270023])
reader = pyvista.get_reader('../Train/ParabolicLinear/snapshots/truth_0.xdmf')
points=reader.read().points

print(points.shape  )
points=np.array(points[:,0:2],dtype=np.float32)
num_points=len(points)
print(points)
interior=points[np.where((points[:,0]>0) & (points[:,0]<1) & (points[:,1]>0) & (points[:,1]<1))]

num_interior=len(interior)
print(num_interior)
#bottom_normal=np.array([0,-1])
#top_normal=np.array([0,1])

#boundary_points=np.vstack((left_boundary,right_boundary,bottom_boundary,top_boundary))
#boundary_normals=np.vstack((left_normal*np.ones((left_boundary.shape[0],1)),right_normal*np.ones((right_boundary.shape[0],1)),bottom_normal*np.ones((bottom_boundary.shape[0],1)),top_normal*np.ones((top_boundary.shape[0],1))))

points_full=np.concatenate((
    np.tile(theta.reshape(1,1,-1,1),(num_points,21,1,1)),
    np.tile(times.reshape(1,-1,1,1),(num_points,1,100,1)),
    np.tile(points.reshape(-1,1,1,2),(1,21,100,1))),axis=3).reshape(-1,4)

interior_full=np.concatenate((
    np.tile(theta.reshape(1,1,-1,1),(num_interior,21,1,1)),
    np.tile(times.reshape(1,-1,1,1),(num_interior,1,100,1)),
    np.tile(interior.reshape(-1,1,1,2),(1,21,100,1))),axis=3).reshape(-1,4)






boundary=np.zeros_like(points_full)[0].reshape(1,4)
boundary_normal=np.zeros_like(points_full)[0].reshape(1,4)


pc = PointCloud(interior_full,boundary, boundary_normal)

def Parabolic(x, y):
    du_t = dde.grad.jacobian(y, x, i=0, j=1)
    du_xx = dde.grad.hessian(y, x, component=0, i=2, j=2)
    du_yy = dde.grad.hessian(y, x, component=0, i=3, j=3)
    return [du_t-0.1*du_xx-0.1*du_yy-x[:,0].unsqueeze(-1)*torch.sin(2*torch.pi*x[:,2]).unsqueeze(-1)*torch.sin(2*torch.pi*x[:,3]).unsqueeze(-1)]

data = dde.data.PDE(
    pc,
    Parabolic,
    [],
    num_domain=num_interior,
    num_boundary=1)




net = dde.nn.FNN(
  [4] + [500] * 4 + [1], "sin", "Glorot uniform"
)

def transform(x, y):    
    u_new=x[:,1].unsqueeze(-1)*(x[:,2].unsqueeze(-1))*(x[:,2].unsqueeze(-1)-1)*(x[:,3].unsqueeze(-1))*(x[:,3].unsqueeze(-1)-1)*y
    return u_new

net.apply_output_transform(transform)

y=torch.tensor([1,1,0,-1],dtype=torch.float32).unsqueeze(0)



model = dde.Model(data, net)



model.compile("adam", lr=0.0001)


losshistory, train_state = model.train(iterations=1000,display_every=1)


theta_train=np.array([0.7289120207996115,0.25409463628131845,0.11009024695349051,0.9557287080549567,0.7111841098771446,0.5639913111779458,0.317057353131431,0.4173116530978206,0.951601632294682,0.8187215764570569,0.6265946679318678,0.9157032519815728,0.11797774345327781,0.5139512809568915,0.8928363594937064,0.6173035001673071,0.4701805002649244,0.9853589932547693,0.3458669798645811,0.1781860793536314,0.44820690775673344,0.2224407887449683,0.5257490624696358,0.9834568326702106,0.20612809566657997,0.21763296080042366,0.681764970719294,0.7903778599048281,0.20091542682148972,0.5863304351949501,0.9377992293962237,0.5422700980792073,0.14607551415736647,0.3386767115889571,0.6107070535689356,0.1817910418370403,0.6840203319811349,0.5828853290127993,0.1169948996694129,0.8000870971191111,0.4346126279215371,0.49256657755736755,0.581869052012907,0.7501792068145007,0.7758667624626573,0.8888947165257599,0.4988312766650844,0.6791047884868425,0.8892165976415137,0.35821250190175413,0.9171422588046395,0.5536799648633998,0.6915333466712602,0.15473974073568258,0.3446104126774485,0.9632901291695781,0.3184032666046604,0.14390268594626723,0.47635129415356003,0.8729330540271749,0.24343061755484577,0.5639601307039651,0.7905645792763382,0.6159551493515403,0.7488487610971467,0.4983361170766347,0.280592855452091,0.5457239559390114,0.12504423371464754,0.44408027484140156,0.3595512110416761,0.3254797474200507,0.3011557475707408,0.9901286151456867,0.3060223952946383,0.5222035030645408,0.9243808004735911,0.5509245973761588,0.7917189266517366,0.622551061659853,0.8648550932650503,0.8000694177193837,0.8816243454370987,0.14981761718185166,0.779490167269205,0.4016123425883861,0.6034140116439618,0.15846220967836758,0.9586851002312624,0.44371555334021406,0.4950826771244593,0.7361237473129891,0.9493696989038557,0.7819922641912838,0.9302579684995561,0.6626264510457329,0.7618815099532775,0.3957944159321374,0.5159701975474963,0.22450716754270023])
theta_test=np.array([0.29921321325146183,0.19589565374588647,0.6870708850241003,0.28750077782961203,0.7730346294166374,0.1781230530051563,0.4745575269808454,0.4883828890964378,0.6007696767615336,0.6112064988749245,0.25525925748182066,0.21551141596049678,0.9570013432925175,0.15133908704859325,0.8268651826681239,0.44949056782395613,0.1561199710524522,0.9997912649646767,0.31027479463591673,0.13888707422197313,0.10412082321184302,0.23429711069230544,0.2233860562908993,0.42848245542022545,0.6643829536391305,0.45502399322567166,0.6131281988427693,0.4440440487242798,0.10784657140825446,0.7922875823288323,0.2877821909333719,0.36738366031078795,0.9946463797802948,0.10925270830571944,0.6778120584069944,0.5656871714119396,0.482894106271778,0.5801493172250752,0.9616384378825654,0.7042618992932801,0.11748887452615706,0.8559653919946534,0.602980110233814,0.9725749463015676,0.16620197715567842,0.39297910479932485,0.3430973435600633,0.9755089043886332,0.8511956290207364,0.3107244462018923,0.9593258172467718,0.14806847028297013,0.6751453590100697,0.17893448050398003,0.9088987416116028,0.41326367174257195,0.5311653492666834,0.2529319588938637,0.5818303701086817,0.9180073440319484,0.1861232384276716,0.506637032815434,0.6308665857154211,0.10921292693428543,0.43762863233648364,0.5255682423639023,0.9154989219324361,0.8503896223787778,0.6291322039276639,0.8634202394951486,0.6194965013078241,0.6111407408280146,0.914957795778894,0.2568804049343961,0.9873342223263551,0.1020682876586104,0.6588780378764446,0.26687509266302,0.4131268050109126,0.6425875305679295,0.31028164776877903,0.28541561054173614,0.35603185633081735,0.4695276979031435,0.5712361795644239,0.5315034870177066,0.7459666033051982,0.4576823814180935,0.3733997303772826,0.7397165479675918,0.6698724571556885,0.36834207534429886,0.687249342191697,0.5687442092622955,0.12503423915750195,0.9800117488829487,0.6374058971873267,0.9520730304358185,0.12165128213142148,0.40401316992931724])

u_train_true=np.zeros((100,21,1472))
u_test_true=np.zeros((100,21,1472))
u_train_pred=np.zeros((100,21,1472))
u_test_pred=np.zeros((100,21,1472))

points_full=np.concatenate((
    np.tile(theta_train.reshape(1,1,-1,1),(num_points,21,1,1)),
    np.tile(times.reshape(1,-1,1,1),(num_points,1,100,1)),
    np.tile(points.reshape(-1,1,1,2),(1,21,100,1))),axis=3).reshape(-1,4)



for i in range(100):
    reader = pyvista.get_reader('../Train/ParabolicLinear/snapshots/truth_{}.xdmf'.format(i))
    for j in range(21):
        reader.set_active_time_value(j)
        u_train_true[i,j,:]=reader.read().point_data[reader.read().point_data.keys()[0]]


for i in range(100):
    reader = pyvista.get_reader('../Test/ParabolicLinear/snapshots/truth_{}.xdmf'.format(i))
    for j in range(21):
        reader.set_active_time_value(j)
        u_test_true[i,j,:]=reader.read().point_data[reader.read().point_data.keys()[0]]

tmp=np.concatenate((
    np.tile(theta_train[i].reshape(1,1,-1,1),(num_points,21,1,1)),
    np.tile(times.reshape(1,-1,1,1),(num_points,1,1,1)),
    np.tile(points.reshape(-1,1,1,2),(1,21,1,1))),axis=3).reshape(-1,4)

start=time()




for i in trange(100):
    u_train_pred[i]=net(torch.tensor(np.concatenate((
    np.tile(theta_train[i].reshape(1,1,-1,1),(num_points,21,1,1)),
    np.tile(times.reshape(1,-1,1,1),(num_points,1,1,1)),
    np.tile(points.reshape(-1,1,1,2),(1,21,1,1))),axis=3),dtype=torch.float32).reshape(-1,4)).reshape(1472,21).T.detach().numpy()

for i in trange(100):
    u_test_pred[i]=net(torch.tensor(np.concatenate((
    np.tile(theta_test[i].reshape(1,1,-1,1),(num_points,21,1,1)),
    np.tile(times.reshape(1,-1,1,1),(num_points,1,1,1)),
    np.tile(points.reshape(-1,1,1,2),(1,21,1,1))),axis=3),dtype=torch.float32).reshape(-1,4)).reshape(1472,21).T.detach().numpy()


end=time()
print(end-start)


print(u_train_pred.shape)
print(u_train_true.shape)
print(u_test_pred.shape)
print(u_test_true.shape)

print(np.linalg.norm(u_train_pred-u_train_true)/np.linalg.norm(u_train_true))
print(np.linalg.norm(u_test_pred-u_test_true)/np.linalg.norm(u_test_true))


tmp=meshio.read("../data/square.xdmf")
mesh_points=tmp.points
cells=tmp.cells

u=u_train_pred[0]
with meshio.xdmf.TimeSeriesWriter("test.xdmf") as writer:
    writer.write_points_cells(points, cells)
    for t in trange(21):
        writer.write_data(t, point_data={"phi": u[t]})
